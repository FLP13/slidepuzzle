{"version":3,"sources":["helper.js","components/PuzzleArea.js","App.js","reportWebVitals.js","index.js"],"names":["isSolved","puzzle","sortedPuzzle","sort","a","b","y","x","numbers","map","piece","value","length","solved","i","PuzzleArea","rows","columns","useState","setPuzzle","setSolved","generatePuzzle","useCallback","generatedPuzzle","Array","from","_","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","number","index","j","useEffect","OutterWrapper","InnerWrapper","PuzzlePiece","onClick","currentPiece","openPiece","find","newPuzzle","movePiece","FooterWrapper","Button","styled","div","props","button","App","Content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c08b4e3.chunk.js","sourcesContent":["// Copied from stack overflow\r\nexport const shuffle = (array) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n}\r\n\r\nexport const isSolved = (puzzle) => {\r\n\r\n    // Sort puzzle by coordinates\r\n    const sortedPuzzle = [...puzzle].sort(function(a, b) {\r\n        return a.y === b.y ? a.x - b.x : a.y - b.y;\r\n      });\r\n    \r\n    // Convert pieces to number array\r\n    const numbers = sortedPuzzle.map(piece => piece.value === 'X' ? sortedPuzzle.length : piece.value);\r\n\r\n    // check if each number is smaller than the next;\r\n    let solved = true;\r\n    for (let i = 0; i < numbers.length - 1; i++) {\r\n        if (numbers[i] > numbers[i+1]) {\r\n            solved = false;\r\n            break;\r\n        }\r\n    }\r\n    return solved;\r\n  }","import styled from 'styled-components';\r\n\r\nimport { shuffle, isSolved } from '../helper';\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const PuzzleArea = ({rows, columns}) => {\r\n\r\n    const [puzzle, setPuzzle] = useState([])\r\n    const [solved, setSolved] = useState(false);\r\n\r\n    const generatePuzzle = useCallback(() => {\r\n        // Create an array from N to rows*columns\r\n        let generatedPuzzle = Array.from({length: rows*columns}, (_, i) => i+1);\r\n\r\n        // replace last number with \"X\"\r\n        generatedPuzzle = generatedPuzzle.map(number => number === rows*columns ? 'X' : number);\r\n\r\n        // Shuffle numbers and X\r\n        generatedPuzzle = shuffle(generatedPuzzle);\r\n        \r\n        // Give each number or X coordinates\r\n        let index = 0;\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < columns; j++) {\r\n                generatedPuzzle[index] = { value: generatedPuzzle[index], x: i, y: j }\r\n                index++;\r\n            }\r\n        }\r\n\r\n        // Set the puzzle\r\n        setPuzzle(generatedPuzzle);\r\n\r\n        // Check if the puzzle is solved, if it is, generate a new puzzle\r\n        if (isSolved(generatedPuzzle)) {\r\n            generatePuzzle(rows, columns);\r\n        }\r\n        setSolved(false);\r\n    }, [rows, columns]) \r\n\r\n    useEffect(() => {\r\n        generatePuzzle();\r\n    }, [generatePuzzle])\r\n\r\n    const movePiece = (currentPiece) => {\r\n\r\n        // Find the X-piece\r\n        const openPiece = puzzle.find(piece => piece.value === 'X');\r\n        \r\n        // Go through each puzzle piece, find the puzzle pieces which is on the same axis\r\n        // as the piece you clicked and the X-piece, if the pieces between have a bigger bigger X or Y axis\r\n        // than the piece you clicked then increment the X or Y axis, if not then decrement.\r\n        // and then put the X-piece where the piece you clicked was on\r\n        const newPuzzle = puzzle.map(piece => {\r\n            if (piece.x === currentPiece.x && piece.x === openPiece.x) {\r\n                if (piece.y >= currentPiece.y && piece.y < openPiece.y) {\r\n                    return { value: piece.value, x: piece.x, y: piece.y+1 }\r\n                } else if (piece.y <= currentPiece.y && piece.y > openPiece.y) {\r\n                    return { value: piece.value, x: piece.x, y: piece.y-1 }\r\n                } else if (piece.value === 'X') {\r\n                    return {value: 'X', x: piece.x, y: currentPiece.y}\r\n                } else {\r\n                    return piece;\r\n                }\r\n            } else if (piece.y === currentPiece.y && piece.y === openPiece.y) {\r\n                if (piece.x >= currentPiece.x && piece.x < openPiece.x) {\r\n                    return { value: piece.value, x: piece.x+1, y: piece.y }\r\n                } else if (piece.x <= currentPiece.x && piece.x > openPiece.x) {\r\n                    return { value: piece.value, x: piece.x-1, y: piece.y }\r\n                } else if (piece.value === 'X') {\r\n                    return {value: 'X', x: currentPiece.x, y: piece.y}\r\n                } else {\r\n                    return piece;\r\n                }\r\n            } else {\r\n                return piece;\r\n            }\r\n        })\r\n        setPuzzle(newPuzzle);\r\n\r\n        // Check if the puzzle is solved\r\n        setSolved(isSolved(newPuzzle));\r\n    }\r\n\r\n\r\n    return (\r\n        <OutterWrapper>\r\n                <InnerWrapper rows={rows} columns={columns}>\r\n                    {\r\n                        puzzle.map(piece => {\r\n                            if (piece.value === 'X') return <span key={piece.value} />\r\n                            return (\r\n                                    <PuzzlePiece \r\n                                        key={piece.value} \r\n                                        onClick={() => movePiece(piece)} \r\n                                        x={piece.x} \r\n                                        y={piece.y}\r\n                                        solved={solved}\r\n                                    >\r\n                                        { piece.value }\r\n                                    </PuzzlePiece>\r\n                                )\r\n                        })\r\n                    }\r\n                </InnerWrapper>\r\n                <FooterWrapper>\r\n                        {\r\n                            solved && <p>Grattis du vann! :D</p>\r\n                        }\r\n                    <Button onClick={() => generatePuzzle(rows, columns)}>\r\n                        { solved ? 'Nytt spel' : 'Slumpa' }\r\n                    </Button>\r\n                </FooterWrapper>\r\n        </OutterWrapper>\r\n    )\r\n}\r\n\r\n// Styled Components\r\nconst OutterWrapper = styled.div`\r\n    padding: 10px;\r\n    font-family: 'Anton', sans-serif;\r\n`\r\n\r\nconst InnerWrapper = styled.div`\r\n    position: relative;\r\n    background: lightgray;\r\n    width: ${props => `${props.rows}05px` };\r\n    height: ${props => `${props.columns}05px` };;\r\n    margin: 0 auto;\r\n`\r\n\r\nconst PuzzlePiece = styled.button`\r\n    width: 95px;\r\n    height: 95px;\r\n    background: ${props => props.solved ? 'green' : '#add8e6'}; ;\r\n    color: white;\r\n    border: 1px solid black;\r\n    border-radius: 10px;\r\n\r\n    position: absolute;\r\n    left: ${props => props.x === 0 ? '5px' : `${props.x}05px`};\r\n    top: ${props => props.y === 0 ? '5px' : `${props.y}05px`};\r\n\r\n    transition: left 0.5s, top 0.5s;\r\n`\r\nconst FooterWrapper = styled.div`\r\n    margin-top: 21px;\r\n    text-align: center;\r\n`\r\n\r\nconst Button = styled.button`\r\n    width: 200px;\r\n    height: 50px;\r\n    background: darkblue;\r\n    color: white;\r\n`","import styled from 'styled-components';\n\nimport { PuzzleArea } from './components/PuzzleArea';\n\nexport const App = () => {\n  return (\n    <Content>\n      <PuzzleArea rows=\"3\" columns=\"3\" />\n    </Content>\n  );\n}\n\nconst Content = styled.div`\n  margin: 0 auto;\n  padding: 20px;\n`\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}